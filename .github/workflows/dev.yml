name: CI-STAGING-GOLOCK

on:
  push:
    branches: [main]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

env:
  IMAGE_NAME: test
  REPO: akhildasts

permissions:
  contents: read

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy Backend Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Testing
        run: go test -v ./...

      - name: Test DNS Resolution
        run: |
          nslookup ${{ secrets.EC2_HOST }}
          ping -c 4 ${{ secrets.EC2_HOST }}


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Generate short SHA and store it as an environment variable
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            akhildasts/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
            akhildasts/${{ env.IMAGE_NAME }}:latest
        continue-on-error: false  # Stop the workflow if this step fails

      # New steps to handle SSH key
      - name: Create .ssh directory
        run: mkdir -p ~/.ssh

      - name: Add SSH private key
        run: |
          echo "${{ secrets.HOST_SSH }}" | tr -d '\r' > ~/.ssh/id_rsa
          
      - name: Adjust SSH key permissions
        run: chmod 600 ~/.ssh/id_rsa

      - name: Debug SSH command
        run: |
          echo "Trying to connect to EC2 instance at ${ { secrets.EC2_HOST }} as ${ { secrets.EC2_USERNAME }}"

      - name: SSH into EC2 and run Docker commands
        uses: appleboy/ssh-action@v0.1.0  # Specify a version instead of master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.HOST_SSH }}
          script: |
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # Stop and remove existing container if it exists
            if [ "$(docker ps -q -f name=${{ env.REPO }})" ]; then
              docker stop ${{ env.REPO }}
              docker rm ${{ env.REPO }}
            fi

            # Remove existing image if it exists
            if [ "$(docker images -q ${{env.REPO}}/${{ env.IMAGE_NAME }})" ]; then
              docker rmi -f ${{env.REPO}}/${{ env.IMAGE_NAME }}
            fi

            # Run the new container
            docker run -p 8080:8080 -d \
              --restart always \
              --name ${{ env.REPO }} \
              ${{ env.REPO }}/${{ env.IMAGE_NAME }}
