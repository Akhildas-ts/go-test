
name: CI-STAGING-GOLOCK

on:
  push:
    branches: [main]
  pull_request:
      branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

env:
          IMAGE_NAME: test
          REPO: akhildasts
         

permissions:
            contents: read

jobs:
            build-and-deploy:
              name: Build, Push, and Deploy Backend Docker Image
              runs-on: ubuntu-latest
              steps:
                - name: Checkout
                  uses: actions/checkout@v3
                - name: Set up QEMU
                  uses: docker/setup-qemu-action@v2
                - name: Testing
                  run: go test -v ./...
                - name: Set up Docker Buildx
                  uses: docker/setup-buildx-action@v2
                - name: Login to DockerHub
                  uses: docker/login-action@v2
                  with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
                - name: Generate short SHA and store it as an environment variable
                  run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          
                - name: Build and push Docker image
                  uses: docker/build-push-action@v3
                  with:
                    context: .
                    push: true
                    tags: |
                      akhildasts/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
                      akhildasts/${{ env.IMAGE_NAME }}:latest
                  continue-on-error: false  # Stop the workflow if this step fails
                - name: SSH into EC2 and run Docker commands
                  uses: appleboy/ssh-action@master
                  with:
                    host: ${{ secrets.EC2_HOST }}
                    username: ${{ secrets.EC2_USERNAME }}
                    key: ${{ secrets.HOST_SSH }}
                    script: |
                      echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
                
                      # Stop and remove any running container with the same name
                      if [ "$(docker ps -q -f name=${{ env.REPO }})" ]; then
                        docker stop ${{ env.REPO }}
                        docker rm -f ${{ env.REPO }}
                        sleep 5  # Wait briefly to ensure removal
                      fi
                
                      # Clean up any stopped containers
                      docker container prune -f
                
                      # Remove old image if it exists
                      if [ "$(docker images -q ${{ env.REPO }}/${{ env.IMAGE_NAME }}:latest)" ]; then
                        docker rmi -f ${{ env.REPO }}/${{ env.IMAGE_NAME }}:latest
                      fi
                
                      # Run the new container using the 'latest' tag
                      docker run -p 8000:8000 -d \
                      --restart always \
                      --name ${{ env.REPO }} \
                      ${{ env.REPO }}/${{ env.IMAGE_NAME }}:latest
                
                
